buildscript {
    repositories {
        jcenter()
    }
    dependencies {
//        classpath group: 'com.bmuschko', name: 'gradle-docker-plugin', version: '3.2.4'
    }
}
//apply plugin: 'com.bmuschko.docker-remote-api'
//apply plugin: 'com.bmuschko.docker-java-application'

configurations{
}

/*为了避免可执行的归档文件和正常的归档文件被写到同一个位置，应该将一个或另一个文件配置为使用一个不同的位置。一种方法是配置一个分类器:*/
bootJar {

    classifier = 'boot'

    /*默认情况下，可执行存档的主类将通过在任务的类路径中的目录中查找一个公共静态void main(String)方法来自动配置。
主类也可以使用任务的mainClassName属性进行显式配置:*/
    manifest {
        attributes 'Start-Class': 'com.wws.cloud.NacosConfigClientApplication'
    }

}

bootRun {
    jvmArgs{
        [
                "-Xmx1g",
                "-Xms1g",
                "-Xms256m",
                "-server",
                "-Djava.rmi.dgc.leaseValue=1800000",
                "-Dsum.rmi.dgc.checkInterval=600000",
                "-Dsum.rmi.dgc.server.gcInterval=3600000",
                "-Djava.rmi.server.disableHttp=true",
                "-Dsun.rmi.transport.tcp.maxConnectionThreads=1000",
                "-Dsun.rmi.transport.tcp.threadKeepAliveTime=120000",
                "-Dsum.rmi.transport.tcp.responseTimeout=30000",//调用超时
                "-Dsum.rmi.transport.tcp.handshakeTimeout=3000"
        ].iterator()
    }
    main = 'com.wws.cloud.NacosConfigClientApplication'
    sourceResources sourceSets.main
}

dependencies {

//    runtime fileTree("D:\\JavaSolution\\Jars\\hfCRM")
//    compile project(":facade-websocket")
    compile "org.springframework.boot:spring-boot-starter-web"
//    compile 'org.springframework.cloud:spring-cloud-starter-alibaba-nacos-config'
    compile "com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-config"

}

